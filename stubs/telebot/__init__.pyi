# Standard Library
from datetime import datetime
from typing import (
    Any, Callable,
)

# Third Party Stuff
from _typeshed import Incomplete
from telebot import (
    apihelper as apihelper, types as types, util as util,
)
from telebot.custom_filters import (
    AdvancedCustomFilter as AdvancedCustomFilter,
    SimpleCustomFilter as SimpleCustomFilter,
)
from telebot.handler_backends import (
    BaseMiddleware as BaseMiddleware,
    CancelUpdate as CancelUpdate,
    ContinueHandling as ContinueHandling,
    FileHandlerBackend as FileHandlerBackend,
    HandlerBackend as HandlerBackend,
    MemoryHandlerBackend as MemoryHandlerBackend,
    SkipHandler as SkipHandler, State as State,
)
from telebot.storage import (
    StateMemoryStorage as StateMemoryStorage,
    StatePickleStorage as StatePickleStorage,
    StateStorageBase as StateStorageBase,
)

logger: Incomplete
formatter: Incomplete
console_output_handler: Incomplete
REPLY_MARKUP_TYPES = types.InlineKeyboardMarkup | types.ReplyKeyboardMarkup | types.ReplyKeyboardRemove | types.ForceReply

class Handler:
    callback: Incomplete
    args: Incomplete
    kwargs: Incomplete
    def __init__(self, callback, *args, **kwargs) -> None: ...
    def __getitem__(self, item): ...

class ExceptionHandler:
    def handle(self, exception): ...

class TeleBot:
    token: Incomplete
    skip_pending: Incomplete
    last_update_id: Incomplete
    suppress_middleware_excepions: Incomplete
    parse_mode: Incomplete
    disable_web_page_preview: Incomplete
    disable_notification: Incomplete
    protect_content: Incomplete
    allow_sending_without_reply: Incomplete
    webhook_listener: Incomplete
    exc_info: Incomplete
    current_states: Incomplete
    next_step_backend: Incomplete
    reply_backend: Incomplete
    exception_handler: Incomplete
    update_listener: Incomplete
    message_handlers: Incomplete
    edited_message_handlers: Incomplete
    channel_post_handlers: Incomplete
    edited_channel_post_handlers: Incomplete
    message_reaction_handlers: Incomplete
    message_reaction_count_handlers: Incomplete
    inline_handlers: Incomplete
    chosen_inline_handlers: Incomplete
    callback_query_handlers: Incomplete
    shipping_query_handlers: Incomplete
    pre_checkout_query_handlers: Incomplete
    poll_handlers: Incomplete
    poll_answer_handlers: Incomplete
    my_chat_member_handlers: Incomplete
    chat_member_handlers: Incomplete
    chat_join_request_handlers: Incomplete
    chat_boost_handlers: Incomplete
    removed_chat_boost_handlers: Incomplete
    business_connection_handlers: Incomplete
    business_message_handlers: Incomplete
    edited_business_message_handlers: Incomplete
    deleted_business_messages_handlers: Incomplete
    custom_filters: Incomplete
    state_handlers: Incomplete
    use_class_middlewares: Incomplete
    typed_middleware_handlers: Incomplete
    default_middleware_handlers: Incomplete
    middlewares: Incomplete
    threaded: Incomplete
    worker_pool: Incomplete
    def __init__(self, token: str, parse_mode: str | None = None, threaded: bool | None = True, skip_pending: bool | None = False, num_threads: int | None = 2, next_step_backend: HandlerBackend | None = None, reply_backend: HandlerBackend | None = None, exception_handler: ExceptionHandler | None = None, last_update_id: int | None = 0, suppress_middleware_excepions: bool | None = False, state_storage: StateStorageBase | None = ..., use_class_middlewares: bool | None = False, disable_web_page_preview: bool | None = None, disable_notification: bool | None = None, protect_content: bool | None = None, allow_sending_without_reply: bool | None = None, colorful_logs: bool | None = False) -> None: ...
    @property
    def user(self) -> types.User: ...
    def enable_save_next_step_handlers(self, delay: int | None = 120, filename: str | None = './.handler-saves/step.save'): ...
    def enable_saving_states(self, filename: str | None = './.state-save/states.pkl'): ...
    def enable_save_reply_handlers(self, delay: int = 120, filename: str = './.handler-saves/reply.save') -> None: ...
    def disable_save_next_step_handlers(self) -> None: ...
    def disable_save_reply_handlers(self) -> None: ...
    def load_next_step_handlers(self, filename: str = './.handler-saves/step.save', del_file_after_loading: bool = True) -> None: ...
    def load_reply_handlers(self, filename: str = './.handler-saves/reply.save', del_file_after_loading: bool = True) -> None: ...
    def set_webhook(self, url: str | None = None, certificate: str | Any | None = None, max_connections: int | None = None, allowed_updates: list[str] | None = None, ip_address: str | None = None, drop_pending_updates: bool | None = None, timeout: int | None = None, secret_token: str | None = None) -> bool: ...
    def run_webhooks(self, listen: str | None = '127.0.0.1', port: int | None = 443, url_path: str | None = None, certificate: str | None = None, certificate_key: str | None = None, webhook_url: str | None = None, max_connections: int | None = None, allowed_updates: list | None = None, ip_address: str | None = None, drop_pending_updates: bool | None = None, timeout: int | None = None, secret_token: str | None = None, secret_token_length: int | None = 20): ...
    def delete_webhook(self, drop_pending_updates: bool | None = None, timeout: int | None = None) -> bool: ...
    def get_webhook_info(self, timeout: int | None = None) -> types.WebhookInfo: ...
    def remove_webhook(self) -> bool: ...
    def get_updates(self, offset: int | None = None, limit: int | None = None, timeout: int | None = 20, allowed_updates: list[str] | None = None, long_polling_timeout: int = 20) -> list[types.Update]: ...
    def process_new_updates(self, updates: list[types.Update]): ...
    def process_new_messages(self, new_messages) -> None: ...
    def process_new_edited_messages(self, new_edited_message) -> None: ...
    def process_new_channel_posts(self, new_channel_post) -> None: ...
    def process_new_edited_channel_posts(self, new_edited_channel_post) -> None: ...
    def process_new_message_reaction(self, new_message_reactions) -> None: ...
    def process_new_message_reaction_count(self, new_message_reaction_counts) -> None: ...
    def process_new_inline_query(self, new_inline_queries) -> None: ...
    def process_new_chosen_inline_query(self, new_chosen_inline_queries) -> None: ...
    def process_new_callback_query(self, new_callback_queries) -> None: ...
    def process_new_shipping_query(self, new_shipping_queries) -> None: ...
    def process_new_pre_checkout_query(self, new_pre_checkout_queries) -> None: ...
    def process_new_poll(self, new_polls) -> None: ...
    def process_new_poll_answer(self, new_poll_answers) -> None: ...
    def process_new_my_chat_member(self, new_my_chat_members) -> None: ...
    def process_new_chat_member(self, new_chat_members) -> None: ...
    def process_new_chat_join_request(self, new_chat_join_request) -> None: ...
    def process_new_chat_boost(self, new_chat_boosts) -> None: ...
    def process_new_removed_chat_boost(self, new_removed_chat_boosts) -> None: ...
    def process_new_business_connection(self, new_business_connections) -> None: ...
    def process_new_business_message(self, new_business_messages) -> None: ...
    def process_new_edited_business_message(self, new_edited_business_messages) -> None: ...
    def process_new_deleted_business_messages(self, new_deleted_business_messages) -> None: ...
    def process_middlewares(self, update) -> None: ...
    def infinity_polling(self, timeout: int | None = 20, skip_pending: bool | None = False, long_polling_timeout: int | None = 20, logger_level: int | None = ..., allowed_updates: list[str] | None = None, restart_on_change: bool | None = False, path_to_watch: str | None = None, *args, **kwargs): ...
    def polling(self, non_stop: bool | None = False, skip_pending: bool | None = False, interval: int | None = 0, timeout: int | None = 20, long_polling_timeout: int | None = 20, logger_level: int | None = ..., allowed_updates: list[str] | None = None, none_stop: bool | None = None, restart_on_change: bool | None = False, path_to_watch: str | None = None): ...
    def stop_polling(self) -> None: ...
    def stop_bot(self) -> None: ...
    def set_update_listener(self, listener: Callable): ...
    def get_me(self) -> types.User: ...
    def get_file(self, file_id: str | None) -> types.File: ...
    def get_file_url(self, file_id: str | None) -> str: ...
    def download_file(self, file_path: str) -> bytes: ...
    def log_out(self) -> bool: ...
    def close(self) -> bool: ...
    def set_message_reaction(self, chat_id: int | str, message_id: int, reaction: list[types.ReactionType] | None = None, is_big: bool | None = None) -> bool: ...
    def get_user_profile_photos(self, user_id: int, offset: int | None = None, limit: int | None = None) -> types.UserProfilePhotos: ...
    def get_chat(self, chat_id: int | str) -> types.ChatFullInfo: ...
    def leave_chat(self, chat_id: int | str) -> bool: ...
    def get_chat_administrators(self, chat_id: int | str) -> list[types.ChatMember]: ...
    def get_chat_members_count(self, chat_id: int | str) -> int: ...
    def get_chat_member_count(self, chat_id: int | str) -> int: ...
    def set_chat_sticker_set(self, chat_id: int | str, sticker_set_name: str) -> types.StickerSet: ...
    def delete_chat_sticker_set(self, chat_id: int | str) -> bool: ...
    def get_chat_member(self, chat_id: int | str, user_id: int) -> types.ChatMember: ...
    def send_message(self, chat_id: int | str, text: str, parse_mode: str | None = None, entities: list[types.MessageEntity] | None = None, disable_web_page_preview: bool | None = None, disable_notification: bool | None = None, protect_content: bool | None = None, reply_to_message_id: int | None = None, allow_sending_without_reply: bool | None = None, reply_markup: REPLY_MARKUP_TYPES | None = None, timeout: int | None = None, message_thread_id: int | None = None, reply_parameters: types.ReplyParameters | None = None, link_preview_options: types.LinkPreviewOptions | None = None, business_connection_id: str | None = None, message_effect_id: str | None = None) -> types.Message: ...
    def forward_message(self, chat_id: int | str, from_chat_id: int | str, message_id: int, disable_notification: bool | None = None, protect_content: bool | None = None, timeout: int | None = None, message_thread_id: int | None = None) -> types.Message: ...
    def copy_message(self, chat_id: int | str, from_chat_id: int | str, message_id: int, caption: str | None = None, parse_mode: str | None = None, caption_entities: list[types.MessageEntity] | None = None, disable_notification: bool | None = None, protect_content: bool | None = None, reply_to_message_id: int | None = None, allow_sending_without_reply: bool | None = None, reply_markup: REPLY_MARKUP_TYPES | None = None, timeout: int | None = None, message_thread_id: int | None = None, reply_parameters: types.ReplyParameters | None = None, show_caption_above_media: bool | None = None) -> types.MessageID: ...
    def delete_message(self, chat_id: int | str, message_id: int, timeout: int | None = None) -> bool: ...
    def delete_messages(self, chat_id: int | str, message_ids: list[int]): ...
    def forward_messages(self, chat_id: str | int, from_chat_id: str | int, message_ids: list[int], disable_notification: bool | None = None, message_thread_id: int | None = None, protect_content: bool | None = None) -> list[types.MessageID]: ...
    def copy_messages(self, chat_id: str | int, from_chat_id: str | int, message_ids: list[int], disable_notification: bool | None = None, message_thread_id: int | None = None, protect_content: bool | None = None, remove_caption: bool | None = None) -> list[types.MessageID]: ...
    def send_dice(self, chat_id: int | str, emoji: str | None = None, disable_notification: bool | None = None, reply_to_message_id: int | None = None, reply_markup: REPLY_MARKUP_TYPES | None = None, timeout: int | None = None, allow_sending_without_reply: bool | None = None, protect_content: bool | None = None, message_thread_id: int | None = None, reply_parameters: types.ReplyParameters | None = None, business_connection_id: str | None = None, message_effect_id: str | None = None) -> types.Message: ...
    def send_photo(self, chat_id: int | str, photo: Any | str, caption: str | None = None, parse_mode: str | None = None, caption_entities: list[types.MessageEntity] | None = None, disable_notification: bool | None = None, protect_content: bool | None = None, reply_to_message_id: int | None = None, allow_sending_without_reply: bool | None = None, reply_markup: REPLY_MARKUP_TYPES | None = None, timeout: int | None = None, message_thread_id: int | None = None, has_spoiler: bool | None = None, reply_parameters: types.ReplyParameters | None = None, business_connection_id: str | None = None, message_effect_id: str | None = None, show_caption_above_media: bool | None = None) -> types.Message: ...
    def send_audio(self, chat_id: int | str, audio: Any | str, caption: str | None = None, duration: int | None = None, performer: str | None = None, title: str | None = None, reply_to_message_id: int | None = None, reply_markup: REPLY_MARKUP_TYPES | None = None, parse_mode: str | None = None, disable_notification: bool | None = None, timeout: int | None = None, thumbnail: Any | str | None = None, caption_entities: list[types.MessageEntity] | None = None, allow_sending_without_reply: bool | None = None, protect_content: bool | None = None, message_thread_id: int | None = None, thumb: Any | str | None = None, reply_parameters: types.ReplyParameters | None = None, business_connection_id: str | None = None, message_effect_id: str | None = None) -> types.Message: ...
    def send_voice(self, chat_id: int | str, voice: Any | str, caption: str | None = None, duration: int | None = None, reply_to_message_id: int | None = None, reply_markup: REPLY_MARKUP_TYPES | None = None, parse_mode: str | None = None, disable_notification: bool | None = None, timeout: int | None = None, caption_entities: list[types.MessageEntity] | None = None, allow_sending_without_reply: bool | None = None, protect_content: bool | None = None, message_thread_id: int | None = None, reply_parameters: types.ReplyParameters | None = None, business_connection_id: str | None = None, message_effect_id: str | None = None) -> types.Message: ...
    def send_document(self, chat_id: int | str, document: Any | str, reply_to_message_id: int | None = None, caption: str | None = None, reply_markup: REPLY_MARKUP_TYPES | None = None, parse_mode: str | None = None, disable_notification: bool | None = None, timeout: int | None = None, thumbnail: Any | str | None = None, caption_entities: list[types.MessageEntity] | None = None, allow_sending_without_reply: bool | None = None, visible_file_name: str | None = None, disable_content_type_detection: bool | None = None, data: Any | str | None = None, protect_content: bool | None = None, message_thread_id: int | None = None, thumb: Any | str | None = None, reply_parameters: types.ReplyParameters | None = None, business_connection_id: str | None = None, message_effect_id: str | None = None) -> types.Message: ...
    def send_sticker(self, chat_id: int | str, sticker: Any | str, reply_to_message_id: int | None = None, reply_markup: REPLY_MARKUP_TYPES | None = None, disable_notification: bool | None = None, timeout: int | None = None, allow_sending_without_reply: bool | None = None, protect_content: bool | None = None, data: Any | str = None, message_thread_id: int | None = None, emoji: str | None = None, reply_parameters: types.ReplyParameters | None = None, business_connection_id: str | None = None, message_effect_id: str | None = None) -> types.Message: ...
    def send_video(self, chat_id: int | str, video: Any | str, duration: int | None = None, width: int | None = None, height: int | None = None, thumbnail: Any | str | None = None, caption: str | None = None, parse_mode: str | None = None, caption_entities: list[types.MessageEntity] | None = None, supports_streaming: bool | None = None, disable_notification: bool | None = None, protect_content: bool | None = None, reply_to_message_id: int | None = None, allow_sending_without_reply: bool | None = None, reply_markup: REPLY_MARKUP_TYPES | None = None, timeout: int | None = None, data: Any | str | None = None, message_thread_id: int | None = None, has_spoiler: bool | None = None, thumb: Any | str | None = None, reply_parameters: types.ReplyParameters | None = None, business_connection_id: str | None = None, message_effect_id: str | None = None, show_caption_above_media: bool | None = None) -> types.Message: ...
    def send_animation(self, chat_id: int | str, animation: Any | str, duration: int | None = None, width: int | None = None, height: int | None = None, thumbnail: Any | str | None = None, caption: str | None = None, parse_mode: str | None = None, caption_entities: list[types.MessageEntity] | None = None, disable_notification: bool | None = None, protect_content: bool | None = None, reply_to_message_id: int | None = None, allow_sending_without_reply: bool | None = None, reply_markup: REPLY_MARKUP_TYPES | None = None, timeout: int | None = None, message_thread_id: int | None = None, has_spoiler: bool | None = None, thumb: Any | str | None = None, reply_parameters: types.ReplyParameters | None = None, business_connection_id: str | None = None, message_effect_id: str | None = None, show_caption_above_media: bool | None = None) -> types.Message: ...
    def send_video_note(self, chat_id: int | str, data: Any | str, duration: int | None = None, length: int | None = None, reply_to_message_id: int | None = None, reply_markup: REPLY_MARKUP_TYPES | None = None, disable_notification: bool | None = None, timeout: int | None = None, thumbnail: Any | str | None = None, allow_sending_without_reply: bool | None = None, protect_content: bool | None = None, message_thread_id: int | None = None, thumb: Any | str | None = None, reply_parameters: types.ReplyParameters | None = None, business_connection_id: str | None = None, message_effect_id: str | None = None) -> types.Message: ...
    def send_media_group(self, chat_id: int | str, media: list[types.InputMediaAudio | types.InputMediaDocument | types.InputMediaPhoto | types.InputMediaVideo], disable_notification: bool | None = None, protect_content: bool | None = None, reply_to_message_id: int | None = None, timeout: int | None = None, allow_sending_without_reply: bool | None = None, message_thread_id: int | None = None, reply_parameters: types.ReplyParameters | None = None, business_connection_id: str | None = None, message_effect_id: str | None = None) -> list[types.Message]: ...
    def send_location(self, chat_id: int | str, latitude: float, longitude: float, live_period: int | None = None, reply_to_message_id: int | None = None, reply_markup: REPLY_MARKUP_TYPES | None = None, disable_notification: bool | None = None, timeout: int | None = None, horizontal_accuracy: float | None = None, heading: int | None = None, proximity_alert_radius: int | None = None, allow_sending_without_reply: bool | None = None, protect_content: bool | None = None, message_thread_id: int | None = None, reply_parameters: types.ReplyParameters | None = None, business_connection_id: str | None = None, message_effect_id: str | None = None) -> types.Message: ...
    def edit_message_live_location(self, latitude: float, longitude: float, chat_id: int | str | None = None, message_id: int | None = None, inline_message_id: str | None = None, reply_markup: types.InlineKeyboardMarkup | None = None, timeout: int | None = None, horizontal_accuracy: float | None = None, heading: int | None = None, proximity_alert_radius: int | None = None, live_period: int | None = None) -> None: ...
    def stop_message_live_location(self, chat_id: int | str | None = None, message_id: int | None = None, inline_message_id: str | None = None, reply_markup: types.InlineKeyboardMarkup | None = None, timeout: int | None = None) -> None: ...
    def send_venue(self, chat_id: int | str, latitude: float | None, longitude: float | None, title: str, address: str, foursquare_id: str | None = None, foursquare_type: str | None = None, disable_notification: bool | None = None, reply_to_message_id: int | None = None, reply_markup: REPLY_MARKUP_TYPES | None = None, timeout: int | None = None, allow_sending_without_reply: bool | None = None, google_place_id: str | None = None, google_place_type: str | None = None, protect_content: bool | None = None, message_thread_id: int | None = None, reply_parameters: types.ReplyParameters | None = None, business_connection_id: str | None = None, message_effect_id: str | None = None) -> types.Message: ...
    def send_contact(self, chat_id: int | str, phone_number: str, first_name: str, last_name: str | None = None, vcard: str | None = None, disable_notification: bool | None = None, reply_to_message_id: int | None = None, reply_markup: REPLY_MARKUP_TYPES | None = None, timeout: int | None = None, allow_sending_without_reply: bool | None = None, protect_content: bool | None = None, message_thread_id: int | None = None, reply_parameters: types.ReplyParameters | None = None, business_connection_id: str | None = None, message_effect_id: str | None = None) -> types.Message: ...
    def send_chat_action(self, chat_id: int | str, action: str, timeout: int | None = None, message_thread_id: int | None = None, business_connection_id: str | None = None) -> bool: ...
    def kick_chat_member(self, chat_id: int | str, user_id: int, until_date: int | datetime | None = None, revoke_messages: bool | None = None) -> bool: ...
    def ban_chat_member(self, chat_id: int | str, user_id: int, until_date: int | datetime | None = None, revoke_messages: bool | None = None) -> bool: ...
    def unban_chat_member(self, chat_id: int | str, user_id: int, only_if_banned: bool | None = False) -> bool: ...
    def restrict_chat_member(self, chat_id: int | str, user_id: int, until_date: int | datetime | None = None, can_send_messages: bool | None = None, can_send_media_messages: bool | None = None, can_send_polls: bool | None = None, can_send_other_messages: bool | None = None, can_add_web_page_previews: bool | None = None, can_change_info: bool | None = None, can_invite_users: bool | None = None, can_pin_messages: bool | None = None, permissions: types.ChatPermissions | None = None, use_independent_chat_permissions: bool | None = None) -> bool: ...
    def promote_chat_member(self, chat_id: int | str, user_id: int, can_change_info: bool | None = None, can_post_messages: bool | None = None, can_edit_messages: bool | None = None, can_delete_messages: bool | None = None, can_invite_users: bool | None = None, can_restrict_members: bool | None = None, can_pin_messages: bool | None = None, can_promote_members: bool | None = None, is_anonymous: bool | None = None, can_manage_chat: bool | None = None, can_manage_video_chats: bool | None = None, can_manage_voice_chats: bool | None = None, can_manage_topics: bool | None = None, can_post_stories: bool | None = None, can_edit_stories: bool | None = None, can_delete_stories: bool | None = None) -> bool: ...
    def set_chat_administrator_custom_title(self, chat_id: int | str, user_id: int, custom_title: str) -> bool: ...
    def ban_chat_sender_chat(self, chat_id: int | str, sender_chat_id: int | str) -> bool: ...
    def unban_chat_sender_chat(self, chat_id: int | str, sender_chat_id: int | str) -> bool: ...
    def set_chat_permissions(self, chat_id: int | str, permissions: types.ChatPermissions, use_independent_chat_permissions: bool | None = None) -> bool: ...
    def create_chat_invite_link(self, chat_id: int | str, name: str | None = None, expire_date: int | datetime | None = None, member_limit: int | None = None, creates_join_request: bool | None = None) -> types.ChatInviteLink: ...
    def edit_chat_invite_link(self, chat_id: int | str, invite_link: str | None = None, name: str | None = None, expire_date: int | datetime | None = None, member_limit: int | None = None, creates_join_request: bool | None = None) -> types.ChatInviteLink: ...
    def revoke_chat_invite_link(self, chat_id: int | str, invite_link: str) -> types.ChatInviteLink: ...
    def export_chat_invite_link(self, chat_id: int | str) -> str: ...
    def approve_chat_join_request(self, chat_id: str | int, user_id: int | str) -> bool: ...
    def decline_chat_join_request(self, chat_id: str | int, user_id: int | str) -> bool: ...
    def set_chat_photo(self, chat_id: int | str, photo: Any) -> bool: ...
    def delete_chat_photo(self, chat_id: int | str) -> bool: ...
    def get_my_commands(self, scope: types.BotCommandScope | None = None, language_code: str | None = None) -> list[types.BotCommand]: ...
    def set_my_name(self, name: str | None = None, language_code: str | None = None): ...
    def get_my_name(self, language_code: str | None = None): ...
    def set_my_description(self, description: str | None = None, language_code: str | None = None): ...
    def get_my_description(self, language_code: str | None = None): ...
    def set_my_short_description(self, short_description: str | None = None, language_code: str | None = None): ...
    def get_my_short_description(self, language_code: str | None = None): ...
    def set_chat_menu_button(self, chat_id: int | str|None = None, menu_button: types.MenuButton|None = None) -> bool: ...
    def get_chat_menu_button(self, chat_id: int | str|None = None) -> types.MenuButton: ...
    def set_my_default_administrator_rights(self, rights: types.ChatAdministratorRights|None = None, for_channels: bool | None = None) -> bool: ...
    def get_my_default_administrator_rights(self, for_channels: bool | None = None) -> types.ChatAdministratorRights: ...
    def get_business_connection(self, business_connection_id: str) -> types.BusinessConnection: ...
    def set_my_commands(self, commands: list[types.BotCommand], scope: types.BotCommandScope | None = None, language_code: str | None = None) -> bool: ...
    def delete_my_commands(self, scope: types.BotCommandScope | None = None, language_code: str | None = None) -> bool: ...
    def set_chat_title(self, chat_id: int | str, title: str) -> bool: ...
    def set_chat_description(self, chat_id: int | str, description: str | None = None) -> bool: ...
    def pin_chat_message(self, chat_id: int | str, message_id: int, disable_notification: bool | None = False) -> bool: ...
    def unpin_chat_message(self, chat_id: int | str, message_id: int | None = None) -> bool: ...
    def unpin_all_chat_messages(self, chat_id: int | str) -> bool: ...
    def edit_message_text(self, text: str, chat_id: int | str | None = None, message_id: int | None = None, inline_message_id: str | None = None, parse_mode: str | None = None, entities: list[types.MessageEntity] | None = None, disable_web_page_preview: bool | None = None, reply_markup: types.InlineKeyboardMarkup | None = None, link_preview_options: types.LinkPreviewOptions | None = None) -> types.Message | bool: ...
    def edit_message_media(self, media: Any, chat_id: int | str | None = None, message_id: int | None = None, inline_message_id: str | None = None, reply_markup: types.InlineKeyboardMarkup | None = None) -> types.Message | bool: ...
    def edit_message_reply_markup(self, chat_id: int | str | None = None, message_id: int | None = None, inline_message_id: str | None = None, reply_markup: types.InlineKeyboardMarkup | None = None) -> types.Message | bool: ...
    def send_game(self, chat_id: int | str, game_short_name: str, disable_notification: bool | None = None, reply_to_message_id: int | None = None, reply_markup: REPLY_MARKUP_TYPES | None = None, timeout: int | None = None, allow_sending_without_reply: bool | None = None, protect_content: bool | None = None, message_thread_id: int | None = None, reply_parameters: types.ReplyParameters | None = None, business_connection_id: str | None = None, message_effect_id: str | None = None) -> types.Message: ...
    def set_game_score(self, user_id: int | str, score: int, force: bool | None = None, chat_id: int | str | None = None, message_id: int | None = None, inline_message_id: str | None = None, disable_edit_message: bool | None = None) -> types.Message | bool: ...
    def get_game_high_scores(self, user_id: int, chat_id: int | str | None = None, message_id: int | None = None, inline_message_id: str | None = None) -> list[types.GameHighScore]: ...
    def send_invoice(self, chat_id: int | str, title: str, description: str, invoice_payload: str, provider_token: str | None, currency: str, prices: list[types.LabeledPrice], start_parameter: str | None = None, photo_url: str | None = None, photo_size: int | None = None, photo_width: int | None = None, photo_height: int | None = None, need_name: bool | None = None, need_phone_number: bool | None = None, need_email: bool | None = None, need_shipping_address: bool | None = None, send_phone_number_to_provider: bool | None = None, send_email_to_provider: bool | None = None, is_flexible: bool | None = None, disable_notification: bool | None = None, reply_to_message_id: int | None = None, reply_markup: REPLY_MARKUP_TYPES | None = None, provider_data: str | None = None, timeout: int | None = None, allow_sending_without_reply: bool | None = None, max_tip_amount: int | None = None, suggested_tip_amounts: list[int] | None = None, protect_content: bool | None = None, message_thread_id: int | None = None, reply_parameters: types.ReplyParameters | None = None, message_effect_id: str | None = None) -> types.Message: ...
    def create_invoice_link(self, title: str, description: str, payload: str, provider_token: str | None, currency: str, prices: list[types.LabeledPrice], max_tip_amount: int | None = None, suggested_tip_amounts: list[int] | None = None, provider_data: str | None = None, photo_url: str | None = None, photo_size: int | None = None, photo_width: int | None = None, photo_height: int | None = None, need_name: bool | None = None, need_phone_number: bool | None = None, need_email: bool | None = None, need_shipping_address: bool | None = None, send_phone_number_to_provider: bool | None = None, send_email_to_provider: bool | None = None, is_flexible: bool | None = None) -> str: ...
    def send_poll(self, chat_id: int | str, question: str, options: list[types.InputPollOption], is_anonymous: bool | None = None, type: str | None = None, allows_multiple_answers: bool | None = None, correct_option_id: int | None = None, explanation: str | None = None, explanation_parse_mode: str | None = None, open_period: int | None = None, close_date: int | datetime | None = None, is_closed: bool | None = None, disable_notification: bool | None = False, reply_to_message_id: int | None = None, reply_markup: REPLY_MARKUP_TYPES | None = None, allow_sending_without_reply: bool | None = None, timeout: int | None = None, explanation_entities: list[types.MessageEntity] | None = None, protect_content: bool | None = None, message_thread_id: int | None = None, reply_parameters: types.ReplyParameters | None = None, business_connection_id: str | None = None, question_parse_mode: str | None = None, question_entities: list[types.MessageEntity] | None = None, message_effect_id: str | None = None) -> types.Message: ...
    def stop_poll(self, chat_id: int | str, message_id: int, reply_markup: types.InlineKeyboardMarkup | None = None) -> types.Poll: ...
    def answer_shipping_query(self, shipping_query_id: str, ok: bool, shipping_options: list[types.ShippingOption] | None = None, error_message: str | None = None) -> bool: ...
    def answer_pre_checkout_query(self, pre_checkout_query_id: int, ok: bool, error_message: str | None = None) -> bool: ...
    def refund_star_payment(self, user_id: int, telegram_payment_charge_id: str) -> bool: ...
    def edit_message_caption(self, caption: str, chat_id: int | str | None = None, message_id: int | None = None, inline_message_id: str | None = None, parse_mode: str | None = None, caption_entities: list[types.MessageEntity] | None = None, reply_markup: types.InlineKeyboardMarkup | None = None, show_caption_above_media: bool | None = None) -> types.Message | bool: ...
    def reply_to(self, message: types.Message, text: str, **kwargs) -> types.Message: ...
    def answer_inline_query(self, inline_query_id: str, results: list[Any], cache_time: int | None = None, is_personal: bool | None = None, next_offset: str | None = None, switch_pm_text: str | None = None, switch_pm_parameter: str | None = None, button: types.InlineQueryResultsButton | None = None) -> bool: ...
    def unpin_all_general_forum_topic_messages(self, chat_id: int | str) -> bool: ...
    def answer_callback_query(self, callback_query_id: int, text: str | None = None, show_alert: bool | None = None, url: str | None = None, cache_time: int | None = None) -> bool: ...
    def get_user_chat_boosts(self, chat_id: int | str, user_id: int) -> types.UserChatBoosts: ...
    def set_sticker_set_thumbnail(self, name: str, user_id: int, thumbnail: Any | str = None, format: str | None = None) -> bool: ...
    def set_sticker_set_thumb(self, name: str, user_id: int, thumb: Any | str = None): ...
    def get_sticker_set(self, name: str) -> types.StickerSet: ...
    def get_custom_emoji_stickers(self, custom_emoji_ids: list[str]) -> list[types.Sticker]: ...
    def set_sticker_keywords(self, sticker: str, keywords: list[str]|None = None) -> bool: ...
    def set_sticker_mask_position(self, sticker: str, mask_position: types.MaskPosition|None = None) -> bool: ...
    def set_custom_emoji_sticker_set_thumbnail(self, name: str, custom_emoji_id: str | None = None) -> bool: ...
    def set_sticker_set_title(self, name: str, title: str) -> bool: ...
    def delete_sticker_set(self, name: str) -> bool: ...
    def replace_sticker_in_set(self, user_id: int, name: str, old_sticker: str, sticker: types.InputSticker) -> bool: ...
    def set_sticker_emoji_list(self, sticker: str, emoji_list: list[str]) -> bool: ...
    def upload_sticker_file(self, user_id: int, png_sticker: Any | str = None, sticker: types.InputFile | None = None, sticker_format: str | None = None) -> types.File: ...
    def create_new_sticker_set(self, user_id: int, name: str, title: str, emojis: list[str] | None = None, png_sticker: Any | str = None, tgs_sticker: Any | str = None, webm_sticker: Any | str = None, contains_masks: bool | None = None, sticker_type: str | None = None, mask_position: types.MaskPosition | None = None, needs_repainting: bool | None = None, stickers: list[types.InputSticker]|None = None, sticker_format: str | None = None) -> bool: ...
    def add_sticker_to_set(self, user_id: int, name: str, emojis: list[str] | str, png_sticker: Any | str | None = None, tgs_sticker: Any | str | None = None, webm_sticker: Any | str | None = None, mask_position: types.MaskPosition | None = None, sticker: types.InputSticker | None = None) -> bool: ...
    def set_sticker_position_in_set(self, sticker: str, position: int) -> bool: ...
    def delete_sticker_from_set(self, sticker: str) -> bool: ...
    def create_forum_topic(self, chat_id: int, name: str, icon_color: int | None = None, icon_custom_emoji_id: str | None = None) -> types.ForumTopic: ...
    def edit_forum_topic(self, chat_id: int | str, message_thread_id: int, name: str | None = None, icon_custom_emoji_id: str | None = None) -> bool: ...
    def close_forum_topic(self, chat_id: str | int, message_thread_id: int) -> bool: ...
    def reopen_forum_topic(self, chat_id: str | int, message_thread_id: int) -> bool: ...
    def delete_forum_topic(self, chat_id: str | int, message_thread_id: int) -> bool: ...
    def unpin_all_forum_topic_messages(self, chat_id: str | int, message_thread_id: int) -> bool: ...
    def edit_general_forum_topic(self, chat_id: int | str, name: str) -> bool: ...
    def close_general_forum_topic(self, chat_id: int | str) -> bool: ...
    def reopen_general_forum_topic(self, chat_id: int | str) -> bool: ...
    def hide_general_forum_topic(self, chat_id: int | str) -> bool: ...
    def unhide_general_forum_topic(self, chat_id: int | str) -> bool: ...
    def get_forum_topic_icon_stickers(self) -> list[types.Sticker]: ...
    def answer_web_app_query(self, web_app_query_id: str, result: types.InlineQueryResultBase) -> types.SentWebAppMessage: ...
    def register_for_reply(self, message: types.Message, callback: Callable, *args, **kwargs) -> None: ...
    def register_for_reply_by_message_id(self, message_id: int, callback: Callable, *args, **kwargs) -> None: ...
    def register_next_step_handler(self, message: types.Message, callback: Callable, *args, **kwargs) -> None: ...
    def setup_middleware(self, middleware: BaseMiddleware): ...
    def set_state(self, user_id: int, state: int | str | State, chat_id: int | None = None) -> None: ...
    def reset_data(self, user_id: int, chat_id: int | None = None): ...
    def delete_state(self, user_id: int, chat_id: int | None = None) -> None: ...
    def retrieve_data(self, user_id: int, chat_id: int | None = None) -> Any | None: ...
    def get_state(self, user_id: int, chat_id: int | None = None) -> int | str | State | None: ...
    def add_data(self, user_id: int, chat_id: int | None = None, **kwargs): ...
    def register_next_step_handler_by_chat_id(self, chat_id: int, callback: Callable, *args, **kwargs) -> None: ...
    def clear_step_handler(self, message: types.Message) -> None: ...
    def clear_step_handler_by_chat_id(self, chat_id: int | str) -> None: ...
    def clear_reply_handlers(self, message: types.Message) -> None: ...
    def clear_reply_handlers_by_message_id(self, message_id: int) -> None: ...
    def middleware_handler(self, update_types: list[str] | None = None): ...
    def add_middleware_handler(self, handler, update_types: Incomplete | None = None) -> None: ...
    def register_middleware_handler(self, callback, update_types: Incomplete | None = None) -> None: ...
    @staticmethod
    def check_commands_input(commands, method_name) -> None: ...
    @staticmethod
    def check_regexp_input(regexp, method_name) -> None: ...
    def message_handler(self, commands: list[str] | None = None, regexp: str | None = None, func: Callable | None = None, content_types: list[str] | None = None, chat_types: list[str] | None = None, **kwargs): ...
    def add_message_handler(self, handler_dict) -> None: ...
    def register_message_handler(self, callback: Callable, content_types: list[str] | None = None, commands: list[str] | None = None, regexp: str | None = None, func: Callable | None = None, chat_types: list[str] | None = None, pass_bot: bool | None = False, **kwargs): ...
    def edited_message_handler(self, commands: Incomplete | None = None, regexp: Incomplete | None = None, func: Incomplete | None = None, content_types: Incomplete | None = None, chat_types: Incomplete | None = None, **kwargs): ...
    def add_edited_message_handler(self, handler_dict) -> None: ...
    def register_edited_message_handler(self, callback: Callable, content_types: list[str] | None = None, commands: list[str] | None = None, regexp: str | None = None, func: Callable | None = None, chat_types: list[str] | None = None, pass_bot: bool | None = False, **kwargs): ...
    def channel_post_handler(self, commands: Incomplete | None = None, regexp: Incomplete | None = None, func: Incomplete | None = None, content_types: Incomplete | None = None, **kwargs): ...
    def add_channel_post_handler(self, handler_dict) -> None: ...
    def register_channel_post_handler(self, callback: Callable, content_types: list[str] | None = None, commands: list[str] | None = None, regexp: str | None = None, func: Callable | None = None, pass_bot: bool | None = False, **kwargs): ...
    def edited_channel_post_handler(self, commands: Incomplete | None = None, regexp: Incomplete | None = None, func: Incomplete | None = None, content_types: Incomplete | None = None, **kwargs): ...
    def add_edited_channel_post_handler(self, handler_dict) -> None: ...
    def register_edited_channel_post_handler(self, callback: Callable, content_types: list[str] | None = None, commands: list[str] | None = None, regexp: str | None = None, func: Callable | None = None, pass_bot: bool | None = False, **kwargs): ...
    def message_reaction_handler(self, func: Incomplete | None = None, **kwargs): ...
    def add_message_reaction_handler(self, handler_dict) -> None: ...
    def register_message_reaction_handler(self, callback: Callable, func: Callable|None = None, pass_bot: bool | None = False, **kwargs): ...
    def message_reaction_count_handler(self, func: Incomplete | None = None, **kwargs): ...
    def add_message_reaction_count_handler(self, handler_dict) -> None: ...
    def register_message_reaction_count_handler(self, callback: Callable, func: Callable|None = None, pass_bot: bool | None = False, **kwargs): ...
    def inline_handler(self, func, **kwargs): ...
    def add_inline_handler(self, handler_dict) -> None: ...
    def register_inline_handler(self, callback: Callable, func: Callable, pass_bot: bool | None = False, **kwargs): ...
    def chosen_inline_handler(self, func, **kwargs): ...
    def add_chosen_inline_handler(self, handler_dict) -> None: ...
    def register_chosen_inline_handler(self, callback: Callable, func: Callable, pass_bot: bool | None = False, **kwargs): ...
    def callback_query_handler(self, func, **kwargs): ...
    def add_callback_query_handler(self, handler_dict) -> None: ...
    def register_callback_query_handler(self, callback: Callable, func: Callable, pass_bot: bool | None = False, **kwargs): ...
    def shipping_query_handler(self, func, **kwargs): ...
    def add_shipping_query_handler(self, handler_dict) -> None: ...
    def register_shipping_query_handler(self, callback: Callable, func: Callable, pass_bot: bool | None = False, **kwargs): ...
    def pre_checkout_query_handler(self, func, **kwargs): ...
    def add_pre_checkout_query_handler(self, handler_dict) -> None: ...
    def register_pre_checkout_query_handler(self, callback: Callable, func: Callable, pass_bot: bool | None = False, **kwargs): ...
    def poll_handler(self, func, **kwargs): ...
    def add_poll_handler(self, handler_dict) -> None: ...
    def register_poll_handler(self, callback: Callable, func: Callable, pass_bot: bool | None = False, **kwargs): ...
    def poll_answer_handler(self, func: Incomplete | None = None, **kwargs): ...
    def add_poll_answer_handler(self, handler_dict) -> None: ...
    def register_poll_answer_handler(self, callback: Callable, func: Callable, pass_bot: bool | None = False, **kwargs): ...
    def my_chat_member_handler(self, func: Incomplete | None = None, **kwargs): ...
    def add_my_chat_member_handler(self, handler_dict) -> None: ...
    def register_my_chat_member_handler(self, callback: Callable, func: Callable | None = None, pass_bot: bool | None = False, **kwargs): ...
    def chat_member_handler(self, func: Incomplete | None = None, **kwargs): ...
    def add_chat_member_handler(self, handler_dict) -> None: ...
    def register_chat_member_handler(self, callback: Callable, func: Callable | None = None, pass_bot: bool | None = False, **kwargs): ...
    def chat_join_request_handler(self, func: Incomplete | None = None, **kwargs): ...
    def add_chat_join_request_handler(self, handler_dict) -> None: ...
    def register_chat_join_request_handler(self, callback: Callable, func: Callable | None = None, pass_bot: bool | None = False, **kwargs): ...
    def chat_boost_handler(self, func: Incomplete | None = None, **kwargs): ...
    def add_chat_boost_handler(self, handler_dict) -> None: ...
    def register_chat_boost_handler(self, callback: Callable, func: Callable | None = None, pass_bot: bool | None = False, **kwargs): ...
    def removed_chat_boost_handler(self, func: Incomplete | None = None, **kwargs): ...
    def add_removed_chat_boost_handler(self, handler_dict) -> None: ...
    def register_removed_chat_boost_handler(self, callback: Callable, func: Callable | None = None, pass_bot: bool | None = False, **kwargs): ...
    def business_connection_handler(self, func: Incomplete | None = None, **kwargs): ...
    def add_business_connection_handler(self, handler_dict) -> None: ...
    def register_business_connection_handler(self, callback: Callable, func: Callable | None = None, pass_bot: bool | None = False, **kwargs): ...
    def business_message_handler(self, commands: list[str] | None = None, regexp: str | None = None, func: Callable | None = None, content_types: list[str] | None = None, **kwargs): ...
    def add_business_message_handler(self, handler_dict) -> None: ...
    def register_business_message_handler(self, callback: Callable, commands: list[str] | None = None, regexp: str | None = None, func: Callable | None = None, content_types: list[str] | None = None, **kwargs): ...
    def edited_business_message_handler(self, commands: Incomplete | None = None, regexp: Incomplete | None = None, func: Incomplete | None = None, content_types: Incomplete | None = None, **kwargs): ...
    def add_edited_business_message_handler(self, handler_dict) -> None: ...
    def register_edited_business_message_handler(self, callback: Callable, content_types: list[str] | None = None, commands: list[str] | None = None, regexp: str | None = None, func: Callable | None = None, pass_bot: bool | None = False, **kwargs): ...
    def deleted_business_messages_handler(self, func: Incomplete | None = None, **kwargs): ...
    def add_deleted_business_messages_handler(self, handler_dict) -> None: ...
    def register_deleted_business_messages_handler(self, callback: Callable, func: Callable | None = None, pass_bot: bool | None = False, **kwargs): ...
    def add_custom_filter(self, custom_filter: SimpleCustomFilter | AdvancedCustomFilter): ...
