from _typeshed import Incomplete
from telebot import apihelper as apihelper

redis_installed: bool

class HandlerBackend:
    handlers: Incomplete
    def __init__(self, handlers: Incomplete | None = None) -> None: ...
    def register_handler(self, handler_group_id, handler) -> None: ...
    def clear_handlers(self, handler_group_id) -> None: ...
    def get_handlers(self, handler_group_id) -> None: ...

class MemoryHandlerBackend(HandlerBackend):
    def register_handler(self, handler_group_id, handler) -> None: ...
    def clear_handlers(self, handler_group_id) -> None: ...
    def get_handlers(self, handler_group_id): ...
    def load_handlers(self, filename, del_file_after_loading) -> None: ...

class FileHandlerBackend(HandlerBackend):
    filename: Incomplete
    delay: Incomplete
    timer: Incomplete
    def __init__(self, handlers: Incomplete | None = None, filename: str = './.handler-saves/handlers.save', delay: int = 120) -> None: ...
    def register_handler(self, handler_group_id, handler) -> None: ...
    def clear_handlers(self, handler_group_id) -> None: ...
    def get_handlers(self, handler_group_id): ...
    def start_save_timer(self) -> None: ...
    def save_handlers(self) -> None: ...
    def load_handlers(self, filename: Incomplete | None = None, del_file_after_loading: bool = True) -> None: ...
    @staticmethod
    def dump_handlers(handlers, filename, file_mode: str = 'wb') -> None: ...
    @staticmethod
    def return_load_handlers(filename, del_file_after_loading: bool = True): ...

class RedisHandlerBackend(HandlerBackend):
    prefix: Incomplete
    redis: Incomplete
    def __init__(self, handlers: Incomplete | None = None, host: str = 'localhost', port: int = 6379, db: int = 0, prefix: str = 'telebot', password: Incomplete | None = None) -> None: ...
    def register_handler(self, handler_group_id, handler) -> None: ...
    def clear_handlers(self, handler_group_id) -> None: ...
    def get_handlers(self, handler_group_id): ...

class State:
    name: Incomplete
    def __init__(self) -> None: ...

class StatesGroup:
    def __init_subclass__(cls) -> None: ...
    @classmethod
    def state_list(self): ...

class BaseMiddleware:
    update_sensitive: bool
    def __init__(self) -> None: ...
    def pre_process(self, message, data) -> None: ...
    def post_process(self, message, data, exception) -> None: ...

class SkipHandler:
    def __init__(self) -> None: ...

class CancelUpdate:
    def __init__(self) -> None: ...

class ContinueHandling:
    def __init__(self) -> None: ...
