from _typeshed import Incomplete

class BaseMiddleware:
    update_sensitive: bool
    def __init__(self) -> None: ...
    async def pre_process(self, message, data) -> None: ...
    async def post_process(self, message, data, exception) -> None: ...

class State:
    name: Incomplete
    def __init__(self) -> None: ...

class StatesGroup:
    def __init_subclass__(cls) -> None: ...
    @classmethod
    def state_list(self): ...

class SkipHandler:
    def __init__(self) -> None: ...

class CancelUpdate:
    def __init__(self) -> None: ...

class ContinueHandling:
    def __init__(self) -> None: ...
